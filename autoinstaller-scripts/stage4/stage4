#!/bin/bash

# See also: https://blogs.gentoo.org/ago/2019/03/20/install-gentoo-in-less-than-one-minute/

clear

BASE_URL="https://github.com/asarubbo/gentoo-stage4/raw/master"

####### USER CONFIGS
TYPE="uefi"
#TYPE="bios"
TARBALL=`curl http://ftp.ntua.gr/pub/linux/gentoo/releases/amd64/autobuilds/latest-stage4-amd64-minimal.txt | egrep '^2' | grep -o '^\S*'`
#TARBALL=`curl http://ftp.ntua.gr/pub/linux/gentoo/releases/amd64/autobuilds/latest-stage4-amd64-hardened+minimal.txt | egrep '^2' | grep -o '^\S*'`
STAGE4_URL="http://ftp.ntua.gr/pub/linux/gentoo/releases/amd64/autobuilds/${TARBALL}"

DISK="/dev/sda"
ESP="/dev/sda1"
BOOT="/dev/sda2"
ROOT="/dev/sda3"
##########

LOCALTIME_URL="${BASE_URL}/misc/CET"
PARTED_URL="${BASE_URL}/misc/parted.txt"
KERNEL_VERSION="4.19.23"
KERNEL_URL="${BASE_URL}/kernels/genkernel/${KERNEL_VERSION}"
MOUNTPOINT="/mnt/gentoo"

echo -ne "\nBefore to run this script you need to configure the basics in the script itself\n\n"
echo "This script will COMPLETELY erase your disk $DISK (see line 63)"
read -r -p "Are you sure? [y/N] " RESPONSE
RESPONSE=${RESPONSE,,}
if [[ ! "$RESPONSE" =~ ^(yes|y)$ ]]
then
	echo "Aborting..."
	exit 1
fi

if [ -z "${TYPE}" ]
then
	echo "You need to delete the comment from one of the available TYPES and relaunch the script"
	exit 1
fi

if [ -z "${STAGE4_URL}" ]
then
	echo "You need to delete the comment from one of the available STAGE4_URL and relaunch the script"
	exit 1
fi

function die () {
	if [ "${?}" != "0" ]
	then
		echo "Something went wrong; aborting..."
		exit 1
	fi
}

# DATE/NTP
#rm -fr /etc/localtime
#curl -s -q -L "${LOCALTIME_URL}" --output /etc/localtime
ntpdate -s -b -u 0.gentoo.pool.ntp.org > /dev/null 2>&1 && hwclock -w

# CLEAN THE DISK
dd if=/dev/zero of="${DISK}" bs=512 count=1 conv=notrunc > /dev/null 2>&1 || die

cd /tmp/
curl -s -q -L "${PARTED_URL}" --output parted.txt || die
sed "s:CHANGEME:${DISK}:" -i parted.txt || die
parted -a optimal < ./parted.txt > /dev/null 2>&1 || die
mkfs.ext4 -F "${BOOT}" > /dev/null 2>&1 || die
mkfs.ext4 -F "${ROOT}" > /dev/null 2>&1 || die
mkdir -p "${MOUNTPOINT}" || die
mount "${ROOT}" "${MOUNTPOINT}" || die
mkdir -p "${MOUNTPOINT}"/boot || die
mount "${BOOT}" "${MOUNTPOINT}"/boot || die
cd "${MOUNTPOINT}" || die
echo "DOWNLOAD IN PROGRESS..."
TARBALL=`curl http://ftp.ntua.gr/pub/linux/gentoo/releases/amd64/autobuilds/latest-stage4-amd64-minimal.txt | egrep '^2' | grep -o '^\S*'`
curl -o /mnt/gentoo/stage3.tar.bz2 http://ftp.ntua.gr/pub/linux/gentoo/releases/amd64/autobuilds/$TARBALL
#curl -s -q -L "${STAGE4_URL}" --output stage4.tar.xz || die
echo "DOWNLOAD DONE..."
echo "DECOMPRESSION IN PROGRESS..."
cd /mnt/gentoo && tar -xJpf stage4.tar.xz || die
echo "DECOMPRESSION DONE..."
rm -fr stage4.tar.xz || die

####
sed "s:j4:j$( nproc ):" -i etc/portage/make.conf
#sed "s:BOOT:$BOOT:" -i etc/fstab || die
#sed "s:ROOT:$ROOT:" -i etc/fstab etc/default/grub || die
(curl -o mkfstab https://github.com/insanitywholesale/installscripts/blob/master/generatefilesystable | bash) && bash -c './mkfstab -U "${MOUNTPOINT}" > "${MOUNTPOINT}"/etc/fstab'
if [ ! -z "$( lsblk --discard "${DISK}" | awk '{print $3}' | grep "0B" )" ]
then
	sed "s:,discard::g" -i etc/fstab || die
fi
####

mkdir dev proc run sys tmp > /dev/null 2>&1
mount -t proc proc "${MOUNTPOINT}"/proc || die
mount --rbind /sys "${MOUNTPOINT}"/sys || die
mount --rbind /dev "${MOUNTPOINT}"/dev || die

# KERNEL
rm -fr "${MOUNTPOINT}"/boot/*hetzner*


# CHROOT COMMANDS

export DISK="${DISK}"

echo -ne "\n\nGRUB:\n"
if [ "${TYPE}" = "uefi" ]
then
	mkfs.fat -F32 "${ESP}" || die
	mkdir -p "${MOUNTPOINT}"/boot/efi
	mount "${ESP}" "${MOUNTPOINT}"/boot/efi || die
	chroot "${MOUNTPOINT}" /bin/bash -c 'PATH="/usr/sbin:/usr/bin:/sbin:/bin" grub2-install --target=x86_64-efi --efi-directory=/boot/efi $DISK' || die
elif [ "${TYPE}" = "bios" ]
then
	sed '/EFI/d' -i etc/fstab || die
	chroot "${MOUNTPOINT}" /bin/bash -c 'PATH="/usr/sbin:/usr/bin:/sbin:/bin" grub2-install $DISK' || die
fi

chroot "${MOUNTPOINT}" /bin/bash -c 'PATH="/usr/sbin:/usr/bin:/sbin:/bin" grub2-mkconfig -o /boot/grub/grub.cfg' || die
chroot "${MOUNTPOINT}" /bin/bash -c 'PATH="/usr/sbin:/usr/bin:/sbin:/bin" echo "root:fail" | chpasswd' || die

rm -fr root/.ssh/authorized_keys || die

if [ -f ./id_rsa.pub ]
then
	cp ./id_rsa.pub root/.ssh/authorized_keys || die
fi

echo -ne "\n\n\nTHE STAGE4 INSTALLATION HAS BEEN COMPLETED....HAVE A NICE DAY ;)\n"
